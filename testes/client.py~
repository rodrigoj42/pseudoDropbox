# Cliente do Clone do Dropbox
import os, hashlib, urllib, pickle, requests
from time import sleep
from getpass import getpass
from flask import send_file

# configs
url = 'http://127.0.0.1:5000' # servidor
path = '.' # pasta atual
t = 5 # segundos de espera

#functions
def auth(user, psswd):
    '''Envia usuario e hash para o servidor a fim de descobrir se o usuario esta ou nao autenticado'''
    authorized = False
    try:
        authorized = eval(urllib.urlopen(url+"/"+user+"/"+psswd+"/auth").read())
    except:
        authorized = False
        print '\'except:'+str(authorized)+'\''
    if not authorized: print "Falha na autenticacao. \n"
    return authorized

def server_changes(user, psswd):
    try:
        new = urllib.urlopen(url+"/"+user+"/"+psswd+"/list")
        new = new.read()
        userpath = './myDropboxClient/'+user+'/'
        with open(userpath+'new.p','wb') as new_file:
            new_file.write(new)
        new = pickle.load(open(userpath+'new.p','rb'))
        os.remove(userpath+'new.p')
    except:
        new = old_server
    return new

def download(user, psswd, item):
    if item == 'files.p':
        return
    print 'Baixando novo arquivo,', item
    try:
        userpath = './myDropboxClient/'+user+'/'
        if not os.path.exists(userpath):
            os.makedirs(userpath)
        urllib.urlretrieve(url+"/"+user+"/"+psswd+"/download/"+item, filename=userpath+item)
    except:
        return 'Nao foi possivel baixar o arquivo'
    return

def local_changes(user):
    '''Checa se existe alguma mudanca no diretorio sendo observado'''
    files = {}
    userpath = './myDropboxClient/'+user+'/'
    if not os.path.exists(userpath):
        os.makedirs(userpath)
    for f in os.listdir(userpath):
        try: files[f] = os.stat(userpath+f).st_mtime
        except: 
            try: files[f] = old_local[f]
            except: files[f] = 0
    return files


def upload(user, psswd, item): 
    print 'Fazendo upload de novo arquivo: ', item
    userpath = './myDropboxClient/'+user+'/'
    if not os.path.exists(userpath):
        os.makedirs(userpath)
    files = {'file': open(userpath+item, 'rb')}
    requests.post(url+"/"+user+"/"+psswd+"/upload/"+item, files=files)
    return

def update(user, psswd, server, local):
    global old_server, old_local

    changes = {}
    files = server.keys() + local.keys()
    for item in files:
        if (item in local) and (item not in server):
            changes[item] = 'Upload'
        if (item in server) and (item not in local):
            changes[item] = 'Download'
        if (item in server) and (item in local):
            if (server[item] - local[item]) > 10.0: 
                print 'Conflito: "%s". Tratando arquivo mais recente como correto' % item 
                changes[item] = 'Download'
            if (local[item] - server[item]) > 10.0:
                print 'Conflito: "%s". Tratando arquivo mais recente como correto' % item 
                changes[item] = 'Upload'
        if (item not in server) and (item in old_server):
            changes[item] = 'Delete local'
        if (item not in local) and (item in old_local):
            changes[item] = 'Delete server'
    
    for key in changes:
        if changes[key] == 'Delete server': delete_server(user, psswd, key)
        if changes[key] == 'Delete local': delete_local(user, key)
        if changes[key] == 'Download': download(user, psswd, key)
        if changes[key] == 'Upload': upload(user, psswd, key)

    old_server = server
    old_local = local 
    return

def delete_server(user, psswd, item):
    urllib.urlopen(url+'/'+user+'/'+psswd+'/delete/'+item)
    print 'Removendo "%s" do servidor' % item
    return

def delete_local(user, item):
    userpath = './myDropboxClient/'+user+'/'
    try: os.rmdir(userpath+item)
    except: 
        try: os.remove(userpath+item)
        except: print 'Erro ao deletar arquivo'
    print 'Removendo', item
    return

def main():
    # auth
    logged = False
    while not logged:
        user = raw_input("Usuario: ")
        psswd = hashlib.sha512(getpass("Senha: ")).hexdigest()
        logged = auth(user, psswd)

    # main loop
    while True:
        update(user, psswd, server_changes(user, psswd), local_changes(user))
        sleep(t)

if __name__ == "__main__": 
    old_local = {}
    old_server = {}
    main()
